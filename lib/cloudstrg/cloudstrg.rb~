module CloudStrg
  
  ##
  # This method returns an instance of an specified driver
  #
  # Params: the "params" variable must contain the following fields
  #   plugin_id: the id of the selected driver.
  #   
  # Returns: 
  #   An instance of the specified driver.
  #
  def self.new_driver params
    type = Cloudstrg::Cloudstrgplugin.find(params[:plugin_id]).plugin_name
    require "#{type}strg/#{type}strg"
    return Kernel.const_get("#{type.capitalize}Strg").new(params)
  end

  
  ##
  # This method returns a list of the available storage drivers.
  #
  def self.driver_list
    l = []
    Cloudstrg::Cloudstrgplugin.find(:all).each {|plugin| l << [plugin.plugin_name, plugin.id]}
    l.sort!
    return l
  end

  ###
  # This class must be inherited by every single driver definition in order to preserve 
  # the coherence between them.
  #
  class CloudStorage
  
    ###
    # This method performs the previous configuration that the current driver needs to work.
    #
    # Params: the "params" variable must contain the following fields
    #   redirect: url that we want the application to redirect us before accepting the selected cloud engine terms,
    #   user: the current user,
    #   session: the session hash.
    #   
    # Returns: 
    #   This method returns two parameters:
    #     session: the session variable with the new parameters added,
    #     uri: the uri where the user will allow the application to use the desired service, 
    #       or false if the configuration was completed successfully.
    #
    def config params
      raise NotImplementedError
    end
  
    ###
    # This method performs the creation of a file.
    #
    # Params: the "params" variable must contain the following fields
    #   filename: the name of the file to create,
    #   file_content: the content of the file.
    #   
    # Returns: 
    #   This method returns the local id of the remote object if the operation success, otherwise it returns false.
    #
    def create_file params
      raise NotImplementedError
    end

    #def create_folder params
    #  raise NotImplementedError
    #end

    ###
    # This method performs the request to obtain a desired file content
    #
    # Params: the "params" variable must contain the following fields
    #   fileid: the id of the selected file.
    #   
    # Returns: 
    #   This method returns three parameters:
    #     filename: the name of the file,
    #     fileid: the id of the file, 
    #     file_content: the content of the file.
    #
    def get_file params
      raise NotImplementedError
    end
  
    ###
    # This method performs the update of a file.
    #
    # Params: the "params" variable must contain the following fields
    #   filename: the name of the file to edit,
    #   fileid: the id of the file, 
    #   file_content: the content of the file.
    #   
    # Returns: 
    #   This method returns the local id of the remote object if the operation success, otherwise it returns false.
    #
    def update_file params
      raise NotImplementedError
    end

    ###
    # This method performs the remove of a file.
    #
    # Params: the "params" variable must contain the following fields
    #   fileid: the id of the file.
    #
    def remove_file params
      raise NotImplementedError
    end

    ###
    # This method returns a list of the available files created by the application.
    #   
    # Returns: 
    #   This method returns a list of tuples, containing: [[filename, fileid], ...] 
    #
    def list_files
      raise NotImplementedError
    end
  
    ###
    # This method allows a user to share a file with other users.
    #
    # Params: the "params" variable must contain the following fields
    #   share_user: the username which we want the file shared with,
    #   file_id: the id of the file,
    #   local_file_id: the local id of the file,
    #   user_id: the id of the  user we want to grant.
    #   
    # Returns: 
    #   This method returns non-nil data if success.
    #
    def share_file params
      raise NotImplementedError
    end
  
    ###
    # This method allows a user to revoke a file's permission to other users.
    #
    # Params: the "params" variable must contain the following fields
    #   permission_id: the id of the permission we want to revoke,
    #   file_id: the id of the file,
    #   local_file_id: the local id of the file,
    #   user_id: the id of the target user.
    #   
    # Returns: 
    #   This method returns non-nil data if success.
    #
    def unshare_file params
      raise NotImplementedError
    end

    ###
    # This method check if a referer is valid
    #
    # Params: 
    #   referer: a string containing the request referer
    #
    def check_referer referer
      raise NotImplementedError
    end

    def save_remoteobject(user, filename, filecontent, file_remote_id)
      plugin_name = self.class.to_s.split('Strg')[0].downcase
      puts plugin_name
      plugin = Cloudstrg::Cloudstrgplugin.find_by_plugin_name(plugin_name)
      
      file = Cloudstrg::Remoteobject.where(:user_id => user.id, :cloudstrgplugin_id => plugin.id, :filename => filename)
      if not file.empty?
        file = file[0]
        file.filehash = filecontent.hash.to_s
      else
        file = plugin.remotes.build(:user_id => user.id, :filename => filename, :filehash => filecontent.hash.to_s, :file_remote_id => file_remote_id)
      end
      file.save
      return file
    end

    def get_remoteobject(ro_id)
      return Cloudstrg::Remoteobject.find(ro_id)
    end 

    def delete_remoteobject(ro_id)
      return Cloudstrg::Remoteobject.find(ro_id).destroy
    end

#    def check_hash(username, filename, filecontent)
#      plugin_name = self.class.to_s.split('Strg')[0].downcase
#      
#      l = Cloudstrg::Remoteobject.where(:username => username, :strgdriver => plugin_name, :filename => filename)
#      if l.size == 1
#        return l[0].filehash == filecontent.hash.to_s
#      else
#        false
#      end
#    end

  end

  class RONotConfigured < Exception
  end

  class ROValidationRequired < Exception
  end


end
